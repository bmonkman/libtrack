openapi: 3.1.0
info:
  title: LibTrack API
  version: 1.0.0
  description: API for managing library books

servers:
  - url: /api
    description: API base URL

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    Book:
      type: object
      required:
        - id
        - isbn
        - title
        - state
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the book
        isbn:
          type: string
          description: International Standard Book Number
        title:
          type: string
          description: Title of the book
        pictureUrl:
          type: string
          format: uri
          description: URL to the book's cover image
        state:
          $ref: '#/components/schemas/BookState'
        dueDate:
          type: string
          format: date-time
          description: The date when the book is due to be returned
        libraryCardId:
          type: string
          format: uuid
          description: ID of the library card the book is checked out to, if any
        userId:
          type: string
          format: uuid
          description: ID of the user who owns this book

    BookState:
      type: string
      enum:
        - checked_out
        - found
        - returned
        - overdue

    PasskeyCredential:
      type: object
      required:
        - id
        - publicKey
        - algorithm
        - authenticatorAttachment
        - transports
      properties:
        id:
          type: string
          description: Base64URL encoded credential ID
        publicKey:
          type: string
          description: Base64URL encoded public key
        algorithm:
          type: string
          description: Algorithm used for the credential
        authenticatorAttachment:
          type: string
          enum:
            - platform
            - cross-platform
          description: Type of authenticator used
        transports:
          type: array
          items:
            type: string
            enum:
              - usb
              - nfc
              - ble
              - internal
          description: List of supported transport methods

    PasskeyRegistrationRequest:
      type: object
      required:
        - name
        - credential
      properties:
        name:
          type: string
          description: User's name
        credential:
          $ref: '#/components/schemas/PasskeyCredential'

    PasskeyLoginRequest:
      type: object
      required:
        - credentialId
        - authenticatorData
        - clientDataJSON
        - signature
      properties:
        credentialId:
          type: string
          description: Base64URL encoded credential ID
        authenticatorData:
          type: string
          description: Base64URL encoded authenticator data
        clientDataJSON:
          type: string
          description: Base64URL encoded client data
        signature:
          type: string
          description: Base64URL encoded signature

    User:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        name:
          type: string
          description: User's name
        credentials:
          type: array
          items:
            $ref: '#/components/schemas/PasskeyCredential'
          description: List of registered passkey credentials
        libraryCards:
          type: array
          items:
            $ref: '#/components/schemas/LibraryCard'
          description: List of library cards owned by the user
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
          description: List of books owned by the user

    LibraryCard:
      type: object
      required:
        - id
        - number
        - displayName
        - system
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the library card
        number:
          type: string
          description: Library card number
        displayName:
          type: string
          description: User-defined display name for the library card
        system:
          type: string
          enum: [nwpl]
          default: nwpl
          description: The library system this card belongs to
        userId:
          type: string
          format: uuid
          description: ID of the user who owns this library card

    BookStateUpdate:
      type: object
      required:
        - id
        - isbn
        - state
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the book
        isbn:
          type: string
        state:
          $ref: '#/components/schemas/BookState'
        dueDate:
          type: string
          format: date-time
          description: The date when the book is due to be returned

paths:
  /auth/register:
    post:
      summary: Register a new user with passkey
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasskeyRegistrationRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    description: JWT token for authentication

  /auth/login:
    post:
      summary: Login with passkey
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasskeyLoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
                  user:
                    $ref: '#/components/schemas/User'

  /auth/verify:
    post:
      summary: Verify a passkey credential
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - credentialId
              properties:
                credentialId:
                  type: string
                  description: ID of the credential to verify
      responses:
        '200':
          description: Credential verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    description: JWT token for authentication

  /auth/me:
    get:
      summary: Get the current authenticated user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Authentication required

  /books:
    get:
      summary: Get books by states
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: states
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/BookState'
      responses:
        '200':
          description: List of books belonging to the authenticated user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '401':
          description: Authentication required

    post:
      summary: Create a new book
      tags:
        - Books
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - isbn
                - title
              properties:
                isbn:
                  type: string
                  description: International Standard Book Number
                title:
                  type: string
                  description: Title of the book
                pictureUrl:
                  type: string
                  format: uri
                  description: URL to the book's cover image
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '401':
          description: Authentication required

    put:
      summary: Update states of multiple books
      tags:
        - Books
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BookStateUpdate'
      responses:
        '200':
          description: States updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '401':
          description: Authentication required

  /books/{id}:
    delete:
      summary: Delete a book
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Book deleted successfully
        '401':
          description: Authentication required
        '404':
          description: Book not found or access denied

  /library-cards:
    get:
      summary: Get list of library cards
      tags:
        - Library Cards
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of library cards belonging to the authenticated user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LibraryCard'
        '401':
          description: Authentication required

    post:
      summary: Create a new library card
      tags:
        - Library Cards
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - number
                - pin
                - displayName
                - system
              properties:
                number:
                  type: string
                  description: Library card number
                pin:
                  type: string
                  description: Library card PIN
                displayName:
                  type: string
                  description: User-defined display name for the library card
                system:
                  type: string
                  enum: [nwpl]
                  default: nwpl
                  description: The library system this card belongs to
      responses:
        '201':
          description: Library card created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryCard'
        '401':
          description: Authentication required

  /library-cards/{id}:
    put:
      summary: Update a library card
      tags:
        - Library Cards
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - number
                - pin
                - displayName
                - system
              properties:
                number:
                  type: string
                  description: Library card number
                pin:
                  type: string
                  description: Library card PIN
                displayName:
                  type: string
                  description: User-defined display name for the library card
                system:
                  type: string
                  enum: [nwpl]
                  default: nwpl
                  description: The library system this card belongs to
      responses:
        '200':
          description: Library card updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryCard'
        '401':
          description: Authentication required
        '404':
          description: Library card not found or access denied

    delete:
      summary: Delete a library card
      tags:
        - Library Cards
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Library card deleted successfully
        '401':
          description: Authentication required
        '404':
          description: Library card not found or access denied
